 src/sw/noc_dev/prototype/Gui/mainwindow.cpp     | 272 +++++++++++++++--------
 src/sw/noc_dev/prototype/Gui/mainwindow.h       |  21 +-
 src/sw/noc_dev/prototype/Gui/myconsole.cpp      |   9 +-
 src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp | 273 ++++++++++++++++--------
 src/sw/noc_dev/prototype_qt6/Gui/mainwindow.h   |  21 +-
 src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp  |   9 +-
 6 files changed, 398 insertions(+), 207 deletions(-)

diff --git a/src/sw/noc_dev/prototype/Gui/mainwindow.cpp b/src/sw/noc_dev/prototype/Gui/mainwindow.cpp
index 32be939bc67..a101b3652a6 100644
--- a/src/sw/noc_dev/prototype/Gui/mainwindow.cpp
+++ b/src/sw/noc_dev/prototype/Gui/mainwindow.cpp
@@ -1338,9 +1338,13 @@ void MainWindow::createFileMenu()
     fileMenu->addAction(instrumentsActMap[OPEN_SOURCE_FILE]);
     fileMenu->addAction(instrumentsActMap[LOAD_STAT]);
     fileMenu->addAction(instrumentsActMap[EXIT_FULLSCREEN]);
+    fileMenu->addSeparator();
     recentlySourcedMenu = new QMenu("Recently Sourced", this);
     recentlySourcedAction = fileMenu->addMenu(recentlySourcedMenu);
+    recentlyLoadedStatsMenu = new QMenu("Recently Loaded Stats", this);
+    recentlyLoadedStatsAction = fileMenu->addMenu(recentlyLoadedStatsMenu);
     fileMenu->addAction(recentlySourcedAction);
+    fileMenu->addAction(recentlyLoadedStatsAction);
     fileMenu->addSeparator();
     fileMenu->addAction(instrumentsActMap[EXIT]);
 }
@@ -4974,7 +4978,13 @@ void MainWindow::clearRecentlySourced()
     console->pathSaveRecentlySource.clear();
     recentlySourcedMenu->clear();
     recentlySourcedAction->setEnabled(false);
-    saveRecentlySourcedHistory();
+}
+
+void MainWindow::clearRecentlyLoaded()
+{
+    lockRecentlyLoad = false;
+    recentlyLoadedStatsMenu->clear();
+    recentlyLoadedStatsAction->setEnabled(false);
 }
 
 void MainWindow::delTypeDomainAct()
@@ -6392,12 +6402,19 @@ void MainWindow::enableControls(bool enable, bool hostCreation)
         instrumentsActMap[DEL_UNIFIED_DOMAIN]->setEnabled(enable);
 
         instrumentsActMap[LOAD_STAT]->setEnabled(state);
+
         if (recentlySourcedMenu->actions().empty()) {
             recentlySourcedAction->setEnabled(false);
         } else {
             recentlySourcedAction->setEnabled(enable);
         }
 
+        if (recentlyLoadedStatsMenu->actions().empty()) {
+            recentlyLoadedStatsAction->setEnabled(false);
+        } else {
+            recentlyLoadedStatsAction->setEnabled(instrumentsActMap[LOAD_STAT]->isEnabled());
+        }
+
         const bool partial_command =
             (console != nullptr && console->getConsole()->is_partial_command_buffered());
         instrumentsActMap[STOP]->setEnabled(!enable || partial_command);
@@ -6584,23 +6601,28 @@ void MainWindow::blockageDialog(bool startDialog) {
     instrumentsActMap[MAKE_ALL_LINKS_UNBLOCKED]->setVisible(true);
 }
 
-void MainWindow::saveRecentlySourcedHistory()
+QStringList MainWindow::saveRecentlySourcedHistory()
 {
-    if (!homeDirectoryCheck()) return;
-    if (lockRecentlySource) return;
-    QString settingFilePath = QDir::homePath().append(QDir::separator()).append(settingFolderName)
-                                              .append(QDir::separator()).append(settingName);
-    QSettings settings(settingFilePath, QSettings::IniFormat);
-
     QStringList sourcedList;
     for (auto action : recentlySourcedMenu->actions()) {
         if (auto sourced = dynamic_cast<RecentlySourced*>(action)) {
             if (!sourcedList.contains(sourced->text())) sourcedList << sourced->text();
         }
     }
-
     std::reverse(std::begin(sourcedList), std::end(sourcedList));
-    settings.setValue("NotForUser/" + recentlySourced, QVariant(sourcedList));
+    return sourcedList;
+}
+
+QStringList MainWindow::saveRecentlyLoadedHistory()
+{
+    QStringList loadedList;
+    for (auto action : recentlyLoadedStatsMenu->actions()) {
+        if (auto loaded = dynamic_cast<RecentlySourced*>(action)) {
+            if (!loadedList.contains(loaded->text())) loadedList << loaded->text();
+        }
+    }
+    std::reverse(std::begin(loadedList), std::end(loadedList));
+    return loadedList;
 }
 
 void MainWindow::initHash()
@@ -6647,34 +6669,40 @@ void MainWindow::saveSettings()
                                               .append(QDir::separator()).append(settingName);
     QSettings settings(settingFilePath, QSettings::IniFormat);
 
+    if (!settings.childGroups().isEmpty()) settings.clear();
+
     //Save geometry
     if (windowState().testFlag(Qt::WindowMaximized)) {
-        if (settings.childGroups().contains(geometryName)) {
+        if (settings.childGroups().contains(screen)) {
             /* Re-use user previous settings */
-            int x = settings.value(geometryName + "/x").toInt();
-            int y = settings.value(geometryName + "/y").toInt();
-            int w = settings.value(geometryName + "/width").toInt();
-            int h = settings.value(geometryName + "/height").toInt();
-
-            settings.setValue(geometryName + "/x", x);
-            settings.setValue(geometryName + "/y", y);
-            settings.setValue(geometryName + "/width", w);
-            settings.setValue(geometryName + "/height", h);
+            int x = settings.value(screen + "/x").toInt();
+            int y = settings.value(screen + "/y").toInt();
+            int w = settings.value(screen + "/width").toInt();
+            int h = settings.value(screen + "/height").toInt();
+
+            settings.setValue(screen + "/x", x);
+            settings.setValue(screen + "/y", y);
+            settings.setValue(screen + "/width", w);
+            settings.setValue(screen + "/height", h);
         } else {
             /* User default settings */
-            settings.setValue(geometryName + "/x", 0);
-            settings.setValue(geometryName + "/y", 0);
-            settings.setValue(geometryName + "/width", 680);
-            settings.setValue(geometryName + "/height", 480);
+            settings.setValue(screen + "/x", 0);
+            settings.setValue(screen + "/y", 0);
+            settings.setValue(screen + "/width", 680);
+            settings.setValue(screen + "/height", 480);
         }        
     } else {
-        settings.setValue(geometryName + "/x", x());
-        settings.setValue(geometryName + "/y", y());
-        settings.setValue(geometryName + "/width", width());
-        settings.setValue(geometryName + "/height", height());
+        settings.setValue(screen + "/x", x());
+        settings.setValue(screen + "/y", y());
+        settings.setValue(screen + "/width", width());
+        settings.setValue(screen + "/height", height());
     }
 
+    settings.setValue("NotForUser/" + recentlySourced, QVariant(saveRecentlySourcedHistory()));
+    settings.setValue("NotForUser/" + recentlyLoaded, QVariant(saveRecentlyLoadedHistory()));
+
     settings.setValue(recentlySourced + "/Locked", QVariant::fromValue(lockRecentlySource));
+    settings.setValue(recentlyLoaded + "/Locked", QVariant::fromValue(lockRecentlyLoad));
 
     //Save font and icon size
     if(auto dialog = ResizeDialog::getResizeDialog()) {
@@ -6683,7 +6711,7 @@ void MainWindow::saveSettings()
         settings.setValue("FontSize/PropertyTabTextSize", QVariant(dialog->getPSlider()->value()));
         settings.setValue("FontSize/ToolbarIconSize", QVariant(dialog->getISlider()->value()));
         if (NetSpeed::Config::netspeed_build()) {
-            settings.setValue("FontSize/sectorSize", QVariant(dialog->getSector()->value()));
+            settings.setValue("FontSize/SectorSize", QVariant(dialog->getSector()->value()));
         }
     }
 
@@ -6718,7 +6746,7 @@ void MainWindow::saveSettings()
     settings.setValue(expireDateName, expireDate.toString("yyyy/MM/dd"));
 
     // Saving other widget state
-    settings.setValue("NotForUser/" + stateName, saveState());
+    settings.setValue("NotForUser/" + layoutState, saveState());
     settings.setValue("NotForUser/" + geometry, saveGeometry());
 }
 
@@ -6733,50 +6761,26 @@ void MainWindow::readSettings()
                                               .append(QDir::separator()).append(settingName);
     QSettings settings(settingFilePath, QSettings::IniFormat);
 
-    /*----------------------------------------------------------------------------------------------
-    Replacing the field "xGerneral" by the field "NotForUser" to help user understand purpose of this field
-    and to avoid lossing "Sourced List" on the end user, NSGUI should keep below code util 25Q4
-    ------------------------------------------------------------------------------------------------*/
-    if (settings.childGroups().contains("xGerneral")) {
-        const QString source = "Source";
-        auto valueSource = settings.value("xGerneral/" + source).toStringList();
-        settings.setValue("NotForUser/" + recentlySourced, QVariant(valueSource));
-        auto valueSTM = settings.value("xGerneral/" + stateName).toByteArray();
-        settings.setValue("NotForUser/" + stateName, valueSTM);
-        auto valueGMT = settings.value("xGerneral/" + geometry).toByteArray();
-        settings.setValue("NotForUser/" + geometry, valueGMT);
-        settings.remove("xGerneral");
-    }
-    /*----------------------------------------------------------------------------------------------*/
-
-    if (!settings.childGroups().contains(viewOptionList)) {
-        QRect screenGeometry = QApplication::desktop()->screenGeometry();
-        int x = (screenGeometry.width() - width()) / 2;
-        int y = (screenGeometry.height() - height()) / 2;
-        move(x, y);
-        return;
-    }
-
-    //restore dock widget state
-    auto byteArr = settings.value("NotForUser/" + stateName).toByteArray();
+    //Restore dock widget state
+    auto byteArr = settings.value("NotForUser/" + layoutState).toByteArray();
     dockEvents.insert(std::pair<int,QByteArray>(0,byteArr));
     restoreState(byteArr);
     //Work around for warning printing when reload settings
     lowerRightDock->setFloating(false);
-    //restore window state
+    //Restore window state
     restoreGeometry(settings.value("NotForUser/" + geometry).toByteArray());
     if (!windowState().testFlag(Qt::WindowMaximized)) {
-        int x = settings.value(geometryName + "/x").toInt();
-        int y = settings.value(geometryName + "/y").toInt();
-        int w = settings.value(geometryName + "/width").toInt();
-        int h = settings.value(geometryName + "/height").toInt();
+        int x = settings.value(screen + "/x").toInt();
+        int y = settings.value(screen + "/y").toInt();
+        int w = settings.value(screen + "/width").toInt();
+        int h = settings.value(screen + "/height").toInt();
         if ((w > 0) && (h > 0)) {
             resize(w, h);
         }
         move(x, y);
     }
    
-    //resto font, icon size
+    //Restore font, icon size
     int sector = 30;
     const int tabTextSize = settings.value("FontSize/TabTextSize").toInt();
     const int consoleTextSize = settings.value("FontSize/ConsoleTextSize").toInt();
@@ -6794,7 +6798,7 @@ void MainWindow::readSettings()
         setMenuIconSize(iconSize);
        
         if (NetSpeed::Config::netspeed_build()) {
-            sector = settings.value("FontSize/sectorSize").toInt();
+            sector = settings.value("FontSize/SectorSize").toInt();
         }
         resizeDialog = ResizeDialog::getResizeDialog(tabTextSize, consoleTextSize,
                                                      propertyTabTextSize, iconSize, sector, this);
@@ -6806,43 +6810,50 @@ void MainWindow::readSettings()
     resizeDialog->setDefaultValues(maintabDefaultFontSize, consoleDefaultFontSize,
                                    propertyDefaultFontSize, DEFAULT_ICON_SIZE);
 
-    //restore dialog option
-    QHash<QString, bool> viewOptions;
-    QHashIterator<QString, QString> i(hash);
-    while (i.hasNext()) {
-        i.next();
-        QString item = settings.value(viewOptionList + "/" + i.value()).toString();
-        if (item.contains("true")) {
-            viewOptions[i.key()] = true;
-        }
-        else {
-            viewOptions[i.key()] = false;
+    //Restore dialog option
+    if (!settings.childGroups().contains(viewOptionList)) {
+        //QRect screenGeometry = QApplication::desktop()->screenGeometry();
+        QRect screenGeometry = QGuiApplication::primaryScreen()->geometry();
+        int x = (screenGeometry.width() - width()) / 2;
+        int y = (screenGeometry.height() - height()) / 2;
+        move(x, y);
+    } else {
+        QHash<QString, bool> viewOptions;
+        QHashIterator<QString, QString> i(hash);
+        while (i.hasNext()) {
+            i.next();
+            QString item = settings.value(viewOptionList + "/" + i.value()).toString();
+            if (item.contains("true")) {
+                viewOptions[i.key()] = true;
+            } else {
+                viewOptions[i.key()] = false;
+            }
         }
-    }
 
-    for (auto const& it : viewMenu->actions()) {
-        if (notSavedOptions.contains(it->text())) {
-            if (it->text() == TEXT_SHOW_LINKS) {
-                it->setChecked(false);
+        for (auto const& it : viewMenu->actions()) {
+            if (notSavedOptions.contains(it->text())) {
+                if (it->text() == TEXT_SHOW_LINKS) {
+                    it->setChecked(false);
+                } else {
+                    it->setChecked(true);
+                }
             } else {
-                it->setChecked(true);
-            }
-        } else {
-            auto menuEnable = dynamic_cast<QMenu*>(it->menu());
-            if (menuEnable) {
-                for (auto const& enableAct : menuEnable->actions()) {
-                    QHash<QString, bool>::const_iterator valueIt = viewOptions.find(enableAct->text());
+                auto menuEnable = dynamic_cast<QMenu*>(it->menu());
+                if (menuEnable) {
+                    for (auto const& enableAct : menuEnable->actions()) {
+                        QHash<QString, bool>::const_iterator valueIt = viewOptions.find(enableAct->text());
+                        if (valueIt != viewOptions.end()) {
+                            enableAct->setChecked(valueIt.value());
+                        }
+                    }
+                } else {
+                    QHash<QString, bool>::const_iterator valueIt = viewOptions.find(it->text());
                     if (valueIt != viewOptions.end()) {
-                        enableAct->setChecked(valueIt.value());
+                        it->setChecked(valueIt.value());
                     }
                 }
-            } else {
-                QHash<QString, bool>::const_iterator valueIt = viewOptions.find(it->text());
-                if (valueIt != viewOptions.end()) {
-                    it->setChecked(valueIt.value());
-                }
             }
-        }       
+        }
     }
 
     //Restore source history
@@ -6850,6 +6861,11 @@ void MainWindow::readSettings()
         addRecentlySourcedAction(val);
     }
 
+    //Restore load history
+    for (const auto& val : settings.value("NotForUser/" + recentlyLoaded).toStringList()) {
+        addRecentlyLoadedAction(val);
+    }
+
     //Restore Locked property of source history
     lockRecentlySource = settings.value(recentlySourced + "/Locked").toBool();
     for (auto action : recentlySourcedMenu->actions()) {
@@ -6857,6 +6873,14 @@ void MainWindow::readSettings()
         action->setChecked(lockRecentlySource);
         break;
     }
+
+    //Restore Locked property of load history
+    lockRecentlyLoad = settings.value(recentlyLoaded + "/Locked").toBool();
+    for (auto action : recentlyLoadedStatsMenu->actions()) {
+        if (action->text() != QString("Lock")) continue;
+        action->setChecked(lockRecentlyLoad);
+        break;
+    }
         
     //hide dockwidgets
     if (propPanel)
@@ -9868,6 +9892,65 @@ bool MainWindow::addRecentlySourcedAction(const QString& cmd)
     return true;
 }
 
+bool MainWindow::addRecentlyLoadedAction(const QString& cmd)
+{
+    if (!recentlyLoadedStatsMenu) return false;
+    if (lockRecentlyLoad) return false;
+    QString command = cmd;
+    if (command.startsWith("load")) command = command.replace("load ", "");
+    auto fileLoad = QFileInfo(command);
+    if (!fileLoad.isFile() || !fileLoad.exists()) return false;
+    command = "load " + command;
+    QList<RecentlySourced*> actions;
+    QAction* lock = nullptr;
+    QAction* clear = nullptr;
+    for (auto action : recentlyLoadedStatsMenu->actions()) {
+        if (action->text() == QString("Lock")) lock = action;
+        if (action->text() == QString("Clear")) clear = action;
+        if (auto loaded = dynamic_cast<RecentlySourced*>(action)) {
+            if (loaded->text() == command) {
+                action->deleteLater();
+                continue;
+            }
+            actions.push_back(loaded);
+        }
+    }
+    if (actions.size() >= 10) recentlyLoadedStatsMenu->removeAction(actions.back());
+    if (actions.empty()) {
+        if (lock && clear) {
+            lock->deleteLater();
+            clear->deleteLater();
+            lock = nullptr;
+            clear = nullptr;
+        }
+        auto act = new RecentlySourced(command, this);
+        recentlyLoadedStatsMenu->addAction(act);
+        actions.push_front(act);
+    }
+    else {
+        auto act = new RecentlySourced(command, this);
+        recentlyLoadedStatsMenu->insertAction(actions.first(), act);
+        actions.push_front(act);
+    }
+    recentlyLoadedStatsMenu->addSeparator();
+    if (!lock) {
+        lock = new QAction("Lock");
+        QAction* clear = new QAction("Clear");
+        connect(clear, SIGNAL(triggered()), this, SLOT(clearRecentlyLoaded()));
+        recentlyLoadedStatsMenu->addAction(lock);
+        connect(lock, &QAction::triggered, this, [&](bool check) {
+            if (check)
+                lockRecentlyLoad = true;
+            else
+                lockRecentlyLoad = false;
+            saveRecentlyLoadedHistory();
+        });
+        recentlyLoadedStatsMenu->addAction(clear);
+        lock->setCheckable(true);
+    }
+    return true;
+}
+
 RecentlySourced::RecentlySourced(QString command, QWidget * parent) : QAction(command, parent) {
     setCheckable(false);
     connect(this, SIGNAL(triggered()), this, SLOT(processCMD()));
@@ -9878,6 +9961,9 @@ void RecentlySourced::processCMD() {
         auto console = mw->getConsole();
         if (!console) return;
         auto command = text();
+        if (command.startsWith("load")) {
+            command = QString(CMD_LOAD_STATTAB) + " {" + text().replace("load ", "") + "}";
+        }
         emit console->processCommandSignal(command);
     }
 }
diff --git a/src/sw/noc_dev/prototype/Gui/mainwindow.h b/src/sw/noc_dev/prototype/Gui/mainwindow.h
index eee56c591a3..2724be635c5 100644
--- a/src/sw/noc_dev/prototype/Gui/mainwindow.h
+++ b/src/sw/noc_dev/prototype/Gui/mainwindow.h
@@ -346,6 +346,7 @@ public:
     bool layerShowHideClicked = false;
     int indexLayer;
     bool lockRecentlySource = false;
+    bool lockRecentlyLoad = false;
     QString getSearchText() { return nocFinder->text(); }
 
     void refreshStatsView();
@@ -528,6 +529,7 @@ public:
     QAction* delActionsOnSpecifyMenu = nullptr;
     QAction* addActionsOnSpecifyMenu = nullptr;
     QAction* recentlySourcedAction   = nullptr;
+    QAction* recentlyLoadedStatsAction   = nullptr;
 public slots:
 
     void showSelectiveLayers();
@@ -690,7 +692,8 @@ private:
     /*
      * Menu.
      */
-    QMenu* fileMenu, * addMenu, * designMenu, * simulateMenu, * generateMenu, * viewMenu, * helpMenu, * tutorialMenu, * exampleMenu, * designReviewMenu, * sessionMenu, * subMenu, * recentlySourcedMenu;
+    QMenu* fileMenu, * addMenu, * designMenu, * simulateMenu, * generateMenu, * viewMenu, * helpMenu, * tutorialMenu, * exampleMenu, * designReviewMenu, * sessionMenu, * subMenu;
+    QMenu* recentlySourcedMenu, * recentlyLoadedStatsMenu;
     QMenu* boxMenu, * highLightMenu, * windowsMenu = nullptr;
     QComboBox* powerProfilesComboBox;
     QToolButton* mapOptButton, * analyzeLinksButton, * runButton, * contButton, * createTraceFilesButton;
@@ -810,12 +813,13 @@ private:
     int preLiveId = ERR;     
 
     //QSetting
-    const QString geometryName = "Geometry";
-    const QString geometry = "GMT";
-    const QString stateName = "STA";
-    const QString iconSize = "iconSize";
-    const QString viewOptionList = "viewOptions";
+    const QString screen = "Screen";
+    const QString geometry = "Geometry";
+    const QString layoutState = "LayoutState";
+    const QString iconSize = "IconSize";
+    const QString viewOptionList = "ViewOptions";
     const QString recentlySourced = "SourcedList";
+    const QString recentlyLoaded = "LoadedList";
     const QString expireDateName = "ExpireDate";
 
     QMap<NetSpeed::Layer_id, QAction*> layersActions;
@@ -888,6 +892,7 @@ private slots:
     void resetConnection();
     void delTypeDomainAct();
     void clearRecentlySourced();
+    void clearRecentlyLoaded();
     void addSpineGatingRegionAct();
     void delSpineGatingRegionAct();
     void consoleFinderButtonSlot();
@@ -1219,7 +1224,9 @@ public:
      * @brief add recently sourced action to file menu
      */
     bool addRecentlySourcedAction(const QString& cmd);
-    void saveRecentlySourcedHistory();
+    bool addRecentlyLoadedAction(const QString& cmd);
+    QStringList saveRecentlySourcedHistory();
+    QStringList saveRecentlyLoadedHistory();
     void createUserNoteDock();
     void setActionsStateBaseOnCore();
     void refreshChopView();
diff --git a/src/sw/noc_dev/prototype/Gui/myconsole.cpp b/src/sw/noc_dev/prototype/Gui/myconsole.cpp
index 02c0ad95d62..bdbdcc39aeb 100644
--- a/src/sw/noc_dev/prototype/Gui/myconsole.cpp
+++ b/src/sw/noc_dev/prototype/Gui/myconsole.cpp
@@ -768,6 +768,11 @@ void INIConsole::processLoadStattabSlot(QString fileName)
         // Succesfully Load
         QString output = tr("StatTab %1 is loaded from %2 file").arg(loadedStattab->id).arg(loadFile);
         printOutput(output);
+        if (mainWindow->addRecentlyLoadedAction(fileName)) {
+            if (!mainWindow->recentlyLoadedStatsAction->isEnabled()) {
+                mainWindow->recentlyLoadedStatsAction->setEnabled(true);
+            }
+        }
     }
 }
 
@@ -975,9 +980,7 @@ void INIConsole::complete(bool stop, QString cmd, bool res)
     ensureCursorVisible();
 
     // save recently source history
-    if (!pathSaveRecentlySource.isEmpty() && !isRunScriptByTerimal &&
-            mainWindow->addRecentlySourcedAction(pathSaveRecentlySource)){
-        mainWindow->saveRecentlySourcedHistory();
+    if (!pathSaveRecentlySource.isEmpty() && !isRunScriptByTerimal && mainWindow->addRecentlySourcedAction(pathSaveRecentlySource)) {
         if (!mainWindow->recentlySourcedAction->isEnabled()) {
             mainWindow->recentlySourcedAction->setEnabled(true);
         }
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp b/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp
index 9738fe7c76c..53f5ed21e88 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp
@@ -1338,9 +1338,13 @@ void MainWindow::createFileMenu()
     fileMenu->addAction(instrumentsActMap[OPEN_SOURCE_FILE]);
     fileMenu->addAction(instrumentsActMap[LOAD_STAT]);
     fileMenu->addAction(instrumentsActMap[EXIT_FULLSCREEN]);
+    fileMenu->addSeparator();
     recentlySourcedMenu = new QMenu("Recently Sourced", this);
     recentlySourcedAction = fileMenu->addMenu(recentlySourcedMenu);
+    recentlyLoadedStatsMenu = new QMenu("Recently Loaded Stats", this);
+    recentlyLoadedStatsAction = fileMenu->addMenu(recentlyLoadedStatsMenu);
     fileMenu->addAction(recentlySourcedAction);
+    fileMenu->addAction(recentlyLoadedStatsAction);
     fileMenu->addSeparator();
     fileMenu->addAction(instrumentsActMap[EXIT]);
 }
@@ -4976,7 +4980,13 @@ void MainWindow::clearRecentlySourced()
     console->pathSaveRecentlySource.clear();
     recentlySourcedMenu->clear();
     recentlySourcedAction->setEnabled(false);
-    saveRecentlySourcedHistory();
+}
+
+void MainWindow::clearRecentlyLoaded()
+{
+    lockRecentlyLoad = false;
+    recentlyLoadedStatsMenu->clear();
+    recentlyLoadedStatsAction->setEnabled(false);
 }
 
 void MainWindow::delTypeDomainAct()
@@ -6393,12 +6403,19 @@ void MainWindow::enableControls(bool enable, bool hostCreation)
         instrumentsActMap[DEL_UNIFIED_DOMAIN]->setEnabled(enable);
 
         instrumentsActMap[LOAD_STAT]->setEnabled(state);
+
         if (recentlySourcedMenu->actions().empty()) {
             recentlySourcedAction->setEnabled(false);
         } else {
             recentlySourcedAction->setEnabled(enable);
         }
 
+        if (recentlyLoadedStatsMenu->actions().empty()) {
+            recentlyLoadedStatsAction->setEnabled(false);
+        } else {
+            recentlyLoadedStatsAction->setEnabled(instrumentsActMap[LOAD_STAT]->isEnabled());
+        }
+
         const bool partial_command =
             (console != nullptr && console->getConsole()->is_partial_command_buffered());
         instrumentsActMap[STOP]->setEnabled(!enable || partial_command);
@@ -6585,23 +6602,28 @@ void MainWindow::blockageDialog(bool startDialog) {
     instrumentsActMap[MAKE_ALL_LINKS_UNBLOCKED]->setVisible(true);
 }
 
-void MainWindow::saveRecentlySourcedHistory()
+QStringList MainWindow::saveRecentlySourcedHistory()
 {
-    if (!homeDirectoryCheck()) return;
-    if (lockRecentlySource) return;
-    QString settingFilePath = QDir::homePath().append(QDir::separator()).append(settingFolderName)
-                                              .append(QDir::separator()).append(settingName);
-    QSettings settings(settingFilePath, QSettings::IniFormat);
-
     QStringList sourcedList;
     for (auto action : recentlySourcedMenu->actions()) {
         if (auto sourced = dynamic_cast<RecentlySourced*>(action)) {
             if (!sourcedList.contains(sourced->text())) sourcedList << sourced->text();
         }
     }
-
     std::reverse(std::begin(sourcedList), std::end(sourcedList));
-    settings.setValue("NotForUser/" + recentlySourced, QVariant(sourcedList));
+    return sourcedList;
+}
+
+QStringList MainWindow::saveRecentlyLoadedHistory()
+{
+    QStringList loadedList;
+    for (auto action : recentlyLoadedStatsMenu->actions()) {
+        if (auto loaded = dynamic_cast<RecentlySourced*>(action)) {
+            if (!loadedList.contains(loaded->text())) loadedList << loaded->text();
+        }
+    }
+    std::reverse(std::begin(loadedList), std::end(loadedList));
+    return loadedList;
 }
 
 void MainWindow::initHash()
@@ -6648,34 +6670,40 @@ void MainWindow::saveSettings()
                                               .append(QDir::separator()).append(settingName);
     QSettings settings(settingFilePath, QSettings::IniFormat);
 
+    if (!settings.childGroups().isEmpty()) settings.clear();
+
     //Save geometry
     if (windowState().testFlag(Qt::WindowMaximized)) {
-        if (settings.childGroups().contains(geometryName)) {
+        if (settings.childGroups().contains(screen)) {
             /* Re-use user previous settings */
-            int x = settings.value(geometryName + "/x").toInt();
-            int y = settings.value(geometryName + "/y").toInt();
-            int w = settings.value(geometryName + "/width").toInt();
-            int h = settings.value(geometryName + "/height").toInt();
-
-            settings.setValue(geometryName + "/x", x);
-            settings.setValue(geometryName + "/y", y);
-            settings.setValue(geometryName + "/width", w);
-            settings.setValue(geometryName + "/height", h);
+            int x = settings.value(screen + "/x").toInt();
+            int y = settings.value(screen + "/y").toInt();
+            int w = settings.value(screen + "/width").toInt();
+            int h = settings.value(screen + "/height").toInt();
+
+            settings.setValue(screen + "/x", x);
+            settings.setValue(screen + "/y", y);
+            settings.setValue(screen + "/width", w);
+            settings.setValue(screen + "/height", h);
         } else {
             /* User default settings */
-            settings.setValue(geometryName + "/x", 0);
-            settings.setValue(geometryName + "/y", 0);
-            settings.setValue(geometryName + "/width", 680);
-            settings.setValue(geometryName + "/height", 480);
+            settings.setValue(screen + "/x", 0);
+            settings.setValue(screen + "/y", 0);
+            settings.setValue(screen + "/width", 680);
+            settings.setValue(screen + "/height", 480);
         }        
     } else {
-        settings.setValue(geometryName + "/x", x());
-        settings.setValue(geometryName + "/y", y());
-        settings.setValue(geometryName + "/width", width());
-        settings.setValue(geometryName + "/height", height());
+        settings.setValue(screen + "/x", x());
+        settings.setValue(screen + "/y", y());
+        settings.setValue(screen + "/width", width());
+        settings.setValue(screen + "/height", height());
     }
 
+    settings.setValue("NotForUser/" + recentlySourced, QVariant(saveRecentlySourcedHistory()));
+    settings.setValue("NotForUser/" + recentlyLoaded, QVariant(saveRecentlyLoadedHistory()));
+
     settings.setValue(recentlySourced + "/Locked", QVariant::fromValue(lockRecentlySource));
+    settings.setValue(recentlyLoaded + "/Locked", QVariant::fromValue(lockRecentlyLoad));
 
     //Save font and icon size
     if(auto dialog = ResizeDialog::getResizeDialog()) {
@@ -6684,7 +6712,7 @@ void MainWindow::saveSettings()
         settings.setValue("FontSize/PropertyTabTextSize", QVariant(dialog->getPSlider()->value()));
         settings.setValue("FontSize/ToolbarIconSize", QVariant(dialog->getISlider()->value()));
         if (NetSpeed::Config::netspeed_build()) {
-            settings.setValue("FontSize/sectorSize", QVariant(dialog->getSector()->value()));
+            settings.setValue("FontSize/SectorSize", QVariant(dialog->getSector()->value()));
         }
     }
 
@@ -6719,7 +6747,7 @@ void MainWindow::saveSettings()
     settings.setValue(expireDateName, expireDate.toString("yyyy/MM/dd"));
 
     // Saving other widget state
-    settings.setValue("NotForUser/" + stateName, saveState());
+    settings.setValue("NotForUser/" + layoutState, saveState());
     settings.setValue("NotForUser/" + geometry, saveGeometry());
 }
 
@@ -6734,51 +6762,26 @@ void MainWindow::readSettings()
                                               .append(QDir::separator()).append(settingName);
     QSettings settings(settingFilePath, QSettings::IniFormat);
 
-    /*----------------------------------------------------------------------------------------------
-    Replacing the field "xGerneral" by the field "NotForUser" to help user understand purpose of this field
-    and to avoid lossing "Sourced List" on the end user, NSGUI should keep below code util 25Q4
-    ------------------------------------------------------------------------------------------------*/
-    if (settings.childGroups().contains("xGerneral")) {
-        const QString source = "Source";
-        auto valueSource = settings.value("xGerneral/" + source).toStringList();
-        settings.setValue("NotForUser/" + recentlySourced, QVariant(valueSource));
-        auto valueSTM = settings.value("xGerneral/" + stateName).toByteArray();
-        settings.setValue("NotForUser/" + stateName, valueSTM);
-        auto valueGMT = settings.value("xGerneral/" + geometry).toByteArray();
-        settings.setValue("NotForUser/" + geometry, valueGMT);
-        settings.remove("xGerneral");
-    }
-    /*----------------------------------------------------------------------------------------------*/
-
-    if (!settings.childGroups().contains(viewOptionList)) {
-        //QRect screenGeometry = QApplication::desktop()->screenGeometry();
-        QRect screenGeometry = QGuiApplication::primaryScreen()->geometry();
-        int x = (screenGeometry.width() - width()) / 2;
-        int y = (screenGeometry.height() - height()) / 2;
-        move(x, y);
-        return;
-    }
-
-    //restore dock widget state
-    auto byteArr = settings.value("NotForUser/" + stateName).toByteArray();
+    //Restore dock widget state
+    auto byteArr = settings.value("NotForUser/" + layoutState).toByteArray();
     dockEvents.insert(std::pair<int,QByteArray>(0,byteArr));
     restoreState(byteArr);
     //Work around for warning printing when reload settings
     lowerRightDock->setFloating(false);
-    //restore window state
+    //Restore window state
     restoreGeometry(settings.value("NotForUser/" + geometry).toByteArray());
     if (!windowState().testFlag(Qt::WindowMaximized)) {
-        int x = settings.value(geometryName + "/x").toInt();
-        int y = settings.value(geometryName + "/y").toInt();
-        int w = settings.value(geometryName + "/width").toInt();
-        int h = settings.value(geometryName + "/height").toInt();
+        int x = settings.value(screen + "/x").toInt();
+        int y = settings.value(screen + "/y").toInt();
+        int w = settings.value(screen + "/width").toInt();
+        int h = settings.value(screen + "/height").toInt();
         if ((w > 0) && (h > 0)) {
             resize(w, h);
         }
         move(x, y);
     }
    
-    //resto font, icon size
+    //Restore font, icon size
     int sector = 30;
     const int tabTextSize = settings.value("FontSize/TabTextSize").toInt();
     const int consoleTextSize = settings.value("FontSize/ConsoleTextSize").toInt();
@@ -6796,7 +6799,7 @@ void MainWindow::readSettings()
         setMenuIconSize(iconSize);
        
         if (NetSpeed::Config::netspeed_build()) {
-            sector = settings.value("FontSize/sectorSize").toInt();
+            sector = settings.value("FontSize/SectorSize").toInt();
         }
         resizeDialog = ResizeDialog::getResizeDialog(tabTextSize, consoleTextSize,
                                                      propertyTabTextSize, iconSize, sector, this);
@@ -6808,43 +6811,50 @@ void MainWindow::readSettings()
     resizeDialog->setDefaultValues(maintabDefaultFontSize, consoleDefaultFontSize,
                                    propertyDefaultFontSize, DEFAULT_ICON_SIZE);
 
-    //restore dialog option
-    QHash<QString, bool> viewOptions;
-    QHashIterator<QString, QString> i(hash);
-    while (i.hasNext()) {
-        i.next();
-        QString item = settings.value(viewOptionList + "/" + i.value()).toString();
-        if (item.contains("true")) {
-            viewOptions[i.key()] = true;
-        }
-        else {
-            viewOptions[i.key()] = false;
+    //Restore dialog option
+    if (!settings.childGroups().contains(viewOptionList)) {
+        //QRect screenGeometry = QApplication::desktop()->screenGeometry();
+        QRect screenGeometry = QGuiApplication::primaryScreen()->geometry();
+        int x = (screenGeometry.width() - width()) / 2;
+        int y = (screenGeometry.height() - height()) / 2;
+        move(x, y);
+    } else {
+        QHash<QString, bool> viewOptions;
+        QHashIterator<QString, QString> i(hash);
+        while (i.hasNext()) {
+            i.next();
+            QString item = settings.value(viewOptionList + "/" + i.value()).toString();
+            if (item.contains("true")) {
+                viewOptions[i.key()] = true;
+            } else {
+                viewOptions[i.key()] = false;
+            }
         }
-    }
 
-    for (auto const& it : viewMenu->actions()) {
-        if (notSavedOptions.contains(it->text())) {
-            if (it->text() == TEXT_SHOW_LINKS) {
-                it->setChecked(false);
+        for (auto const& it : viewMenu->actions()) {
+            if (notSavedOptions.contains(it->text())) {
+                if (it->text() == TEXT_SHOW_LINKS) {
+                    it->setChecked(false);
+                } else {
+                    it->setChecked(true);
+                }
             } else {
-                it->setChecked(true);
-            }
-        } else {
-            auto menuEnable = dynamic_cast<QMenu*>(it->menu());
-            if (menuEnable) {
-                for (auto const& enableAct : menuEnable->actions()) {
-                    QHash<QString, bool>::const_iterator valueIt = viewOptions.find(enableAct->text());
+                auto menuEnable = dynamic_cast<QMenu*>(it->menu());
+                if (menuEnable) {
+                    for (auto const& enableAct : menuEnable->actions()) {
+                        QHash<QString, bool>::const_iterator valueIt = viewOptions.find(enableAct->text());
+                        if (valueIt != viewOptions.end()) {
+                            enableAct->setChecked(valueIt.value());
+                        }
+                    }
+                } else {
+                    QHash<QString, bool>::const_iterator valueIt = viewOptions.find(it->text());
                     if (valueIt != viewOptions.end()) {
-                        enableAct->setChecked(valueIt.value());
+                        it->setChecked(valueIt.value());
                     }
                 }
-            } else {
-                QHash<QString, bool>::const_iterator valueIt = viewOptions.find(it->text());
-                if (valueIt != viewOptions.end()) {
-                    it->setChecked(valueIt.value());
-                }
             }
-        }       
+        }
     }
 
     //Restore source history
@@ -6852,6 +6862,11 @@ void MainWindow::readSettings()
         addRecentlySourcedAction(val);
     }
 
+    //Restore load history
+    for (const auto& val : settings.value("NotForUser/" + recentlyLoaded).toStringList()) {
+        addRecentlyLoadedAction(val);
+    }
+
     //Restore Locked property of source history
     lockRecentlySource = settings.value(recentlySourced + "/Locked").toBool();
     for (auto action : recentlySourcedMenu->actions()) {
@@ -6859,6 +6874,14 @@ void MainWindow::readSettings()
         action->setChecked(lockRecentlySource);
         break;
     }
+
+    //Restore Locked property of load history
+    lockRecentlyLoad = settings.value(recentlyLoaded + "/Locked").toBool();
+    for (auto action : recentlyLoadedStatsMenu->actions()) {
+        if (action->text() != QString("Lock")) continue;
+        action->setChecked(lockRecentlyLoad);
+        break;
+    }
         
     //hide dockwidgets
     if (propPanel)
@@ -9856,6 +9879,65 @@ bool MainWindow::addRecentlySourcedAction(const QString& cmd)
     return true;
 }
 
+bool MainWindow::addRecentlyLoadedAction(const QString& cmd)
+{
+    if (!recentlyLoadedStatsMenu) return false;
+    if (lockRecentlyLoad) return false;
+    QString command = cmd;
+    if (command.startsWith("load")) command = command.replace("load ", "");
+    auto fileLoad = QFileInfo(command);
+    if (!fileLoad.isFile() || !fileLoad.exists()) return false;
+    command = "load " + command;
+    QList<RecentlySourced*> actions;
+    QAction* lock = nullptr;
+    QAction* clear = nullptr;
+    for (auto action : recentlyLoadedStatsMenu->actions()) {
+        if (action->text() == QString("Lock")) lock = action;
+        if (action->text() == QString("Clear")) clear = action;
+        if (auto loaded = dynamic_cast<RecentlySourced*>(action)) {
+            if (loaded->text() == command) {
+                action->deleteLater();
+                continue;
+            }
+            actions.push_back(loaded);
+        }
+    }
+    if (actions.size() >= 10) recentlyLoadedStatsMenu->removeAction(actions.back());
+    if (actions.empty()) {
+        if (lock && clear) {
+            lock->deleteLater();
+            clear->deleteLater();
+            lock = nullptr;
+            clear = nullptr;
+        }
+        auto act = new RecentlySourced(command, this);
+        recentlyLoadedStatsMenu->addAction(act);
+        actions.push_front(act);
+    }
+    else {
+        auto act = new RecentlySourced(command, this);
+        recentlyLoadedStatsMenu->insertAction(actions.first(), act);
+        actions.push_front(act);
+    }
+    recentlyLoadedStatsMenu->addSeparator();
+    if (!lock) {
+        lock = new QAction("Lock");
+        QAction* clear = new QAction("Clear");
+        connect(clear, SIGNAL(triggered()), this, SLOT(clearRecentlyLoaded()));
+        recentlyLoadedStatsMenu->addAction(lock);
+        connect(lock, &QAction::triggered, this, [&](bool check) {
+            if (check)
+                lockRecentlyLoad = true;
+            else
+                lockRecentlyLoad = false;
+            saveRecentlyLoadedHistory();
+        });
+        recentlyLoadedStatsMenu->addAction(clear);
+        lock->setCheckable(true);
+    }
+    return true;
+}
+
 RecentlySourced::RecentlySourced(QString command, QWidget * parent) : QAction(command, parent) {
     setCheckable(false);
     connect(this, SIGNAL(triggered()), this, SLOT(processCMD()));
@@ -9866,6 +9948,9 @@ void RecentlySourced::processCMD() {
         auto console = mw->getConsole();
         if (!console) return;
         auto command = text();
+        if (command.startsWith("load")) {
+            command = QString(CMD_LOAD_STATTAB) + " {" + text().replace("load ", "") + "}";
+        }
         emit console->processCommandSignal(command);
     }
 }
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.h b/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.h
index eee56c591a3..2724be635c5 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.h
+++ b/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.h
@@ -346,6 +346,7 @@ public:
     bool layerShowHideClicked = false;
     int indexLayer;
     bool lockRecentlySource = false;
+    bool lockRecentlyLoad = false;
     QString getSearchText() { return nocFinder->text(); }
 
     void refreshStatsView();
@@ -528,6 +529,7 @@ public:
     QAction* delActionsOnSpecifyMenu = nullptr;
     QAction* addActionsOnSpecifyMenu = nullptr;
     QAction* recentlySourcedAction   = nullptr;
+    QAction* recentlyLoadedStatsAction   = nullptr;
 public slots:
 
     void showSelectiveLayers();
@@ -690,7 +692,8 @@ private:
     /*
      * Menu.
      */
-    QMenu* fileMenu, * addMenu, * designMenu, * simulateMenu, * generateMenu, * viewMenu, * helpMenu, * tutorialMenu, * exampleMenu, * designReviewMenu, * sessionMenu, * subMenu, * recentlySourcedMenu;
+    QMenu* fileMenu, * addMenu, * designMenu, * simulateMenu, * generateMenu, * viewMenu, * helpMenu, * tutorialMenu, * exampleMenu, * designReviewMenu, * sessionMenu, * subMenu;
+    QMenu* recentlySourcedMenu, * recentlyLoadedStatsMenu;
     QMenu* boxMenu, * highLightMenu, * windowsMenu = nullptr;
     QComboBox* powerProfilesComboBox;
     QToolButton* mapOptButton, * analyzeLinksButton, * runButton, * contButton, * createTraceFilesButton;
@@ -810,12 +813,13 @@ private:
     int preLiveId = ERR;     
 
     //QSetting
-    const QString geometryName = "Geometry";
-    const QString geometry = "GMT";
-    const QString stateName = "STA";
-    const QString iconSize = "iconSize";
-    const QString viewOptionList = "viewOptions";
+    const QString screen = "Screen";
+    const QString geometry = "Geometry";
+    const QString layoutState = "LayoutState";
+    const QString iconSize = "IconSize";
+    const QString viewOptionList = "ViewOptions";
     const QString recentlySourced = "SourcedList";
+    const QString recentlyLoaded = "LoadedList";
     const QString expireDateName = "ExpireDate";
 
     QMap<NetSpeed::Layer_id, QAction*> layersActions;
@@ -888,6 +892,7 @@ private slots:
     void resetConnection();
     void delTypeDomainAct();
     void clearRecentlySourced();
+    void clearRecentlyLoaded();
     void addSpineGatingRegionAct();
     void delSpineGatingRegionAct();
     void consoleFinderButtonSlot();
@@ -1219,7 +1224,9 @@ public:
      * @brief add recently sourced action to file menu
      */
     bool addRecentlySourcedAction(const QString& cmd);
-    void saveRecentlySourcedHistory();
+    bool addRecentlyLoadedAction(const QString& cmd);
+    QStringList saveRecentlySourcedHistory();
+    QStringList saveRecentlyLoadedHistory();
     void createUserNoteDock();
     void setActionsStateBaseOnCore();
     void refreshChopView();
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp b/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp
index fd5e4b84ef2..f3d71c0b1e2 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp
@@ -767,6 +767,11 @@ void INIConsole::processLoadStattabSlot(QString fileName)
         // Succesfully Load
         QString output = tr("StatTab %1 is loaded from %2 file").arg(loadedStattab->id).arg(loadFile);
         printOutput(output);
+        if (mainWindow->addRecentlyLoadedAction(fileName)) {
+            if (!mainWindow->recentlyLoadedStatsAction->isEnabled()) {
+                mainWindow->recentlyLoadedStatsAction->setEnabled(true);
+            }
+        }
     }
 }
 
@@ -974,9 +979,7 @@ void INIConsole::complete(bool stop, QString cmd, bool res)
     ensureCursorVisible();
 
     // save recently source history
-    if (!pathSaveRecentlySource.isEmpty() && !isRunScriptByTerimal &&
-            mainWindow->addRecentlySourcedAction(pathSaveRecentlySource)){
-        mainWindow->saveRecentlySourcedHistory();
+    if (!pathSaveRecentlySource.isEmpty() && !isRunScriptByTerimal && mainWindow->addRecentlySourcedAction(pathSaveRecentlySource)) {
         if (!mainWindow->recentlySourcedAction->isEnabled()) {
             mainWindow->recentlySourcedAction->setEnabled(true);
         }
