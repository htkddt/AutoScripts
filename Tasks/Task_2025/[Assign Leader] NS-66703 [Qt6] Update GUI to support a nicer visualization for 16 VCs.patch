 src/sw/noc_dev/GUICore_qt6/NsTypes.cpp             |  33 ++--
 .../noc_dev/prototype_qt6/Gui/Item/NsArrowItem.cpp |  43 +++--
 .../noc_dev/prototype_qt6/Gui/Item/NsArrowItem.h   |   2 +-
 .../prototype_qt6/Gui/Item/NsBridgeDiagram.cpp     | 214 +++++++++++++++------
 .../prototype_qt6/Gui/Item/NsBridgeDiagram.h       |  33 ++--
 src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.cpp |  59 +++++-
 src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.h   |  71 ++++++-
 src/sw/noc_dev/prototype_qt6/Gui/Item/NsVC.cpp     |  13 +-
 .../prototype_qt6/Gui/View/NsNocViewScene.cpp      |  60 +++++-
 src/sw/noc_dev/prototype_qt6/Gui/View/NsScene.cpp  |  27 +++
 src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp    |  16 +-
 src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp     |  17 ++
 src/sw/noc_dev/prototype_qt6/Gui/propertypanel.cpp |  13 +-
 13 files changed, 479 insertions(+), 122 deletions(-)

diff --git a/src/sw/noc_dev/GUICore_qt6/NsTypes.cpp b/src/sw/noc_dev/GUICore_qt6/NsTypes.cpp
index 7123a1a81fc..034790befa8 100644
--- a/src/sw/noc_dev/GUICore_qt6/NsTypes.cpp
+++ b/src/sw/noc_dev/GUICore_qt6/NsTypes.cpp
@@ -99,29 +99,40 @@ QString toolTip2Html(std::string toolTipString)
     return toolTip2Html(QString::fromStdString(toolTipString));
 }
 
-QPainterPath drawNormalArrow(const QLineF & line, bool in, bool uturn)
+bool isPointBetween(QPointF start, QPointF end, QPointF p)
+{
+    if (start.x() == end.x()) {
+        auto yP1ToStart = p.y() - start.y();
+        auto yP1ToEnd   = p.y() - end.y();
+        if ((yP1ToStart * yP1ToEnd) < 0) return true;
+    } else {
+        auto xP1ToStart = p.x() - start.x();
+        auto xP1ToEnd   = p.x() - end.x();
+        if ((xP1ToStart * xP1ToEnd) < 0) return true;
+    }
+
+    return false;
+}
+
+QPainterPath drawNormalArrow(const QLineF& line, bool in, bool uturn)
 {
     QPainterPath path;
     auto start = line.p1();
     auto end = line.p2();
     const int arrowSize = 5;
     double angle = acos(line.dx() / line.length());
-    //draw the arrow
+    // draw the arrow
     if (in) {
         end += start;
         start = end - start;
         end = end - start;
         angle += PI;
     }
-    if (line.dy() >= 0)
-        angle = (PI * 2) - angle;
-
-    QPointF arrowP1 = end - QPointF(sin(angle + PI / 3) * arrowSize,
-        cos(angle + PI / 3) * arrowSize);
-    QPointF arrowP2 = end - QPointF(sin(angle + PI - PI / 3) * arrowSize,
-        cos(angle + PI - PI / 3) * arrowSize);
-    if (arrowP1.x() < 0)
-    {
+    if (line.dy() >= 0) angle = (PI * 2) - angle;
+
+    QPointF arrowP1 = end - QPointF(sin(angle + PI / 3) * arrowSize, cos(angle + PI / 3) * arrowSize);
+    QPointF arrowP2 = end - QPointF(sin(angle + PI - PI / 3) * arrowSize, cos(angle + PI - PI / 3) * arrowSize);
+    if (!isPointBetween(start, end, arrowP1)) {
         arrowP1 = end - QPointF(arrowSize / 2, arrowSize / 2);
         arrowP2.setX(arrowP1.x());
         arrowP2.setY(end.y() + arrowSize / 2);
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.cpp b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.cpp
index 3bb90af23f4..51b0bf66ea7 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.cpp
@@ -7,10 +7,10 @@
 #include <QGraphicsSceneContextMenuEvent>
 #include "Port.h"
 
-void vcContextMenu(QPoint pos, std::string name, Qt::LayoutDirection dir)
+void vcContextMenu(QPoint pos, std::string name, QWidget* wget, Qt::LayoutDirection dir)
 {
-    auto mainWindow = qobject_cast<MainWindow*>(QApplication::activeWindow());
-    Q_CHECK_PTR(mainWindow);
+    auto mw = dynamic_cast<MainWindow*>(wget);
+    if (!mw) return;
     QAction* action = nullptr;
     QString itemName = QString::fromStdString(name);
     NsContextMenu menu;
@@ -39,14 +39,15 @@ void vcContextMenu(QPoint pos, std::string name, Qt::LayoutDirection dir)
     action->setProperty(TEXT_HELP, "reset_channel_colors");
 
     menu.setLayoutDirection(dir);
-    NetSpeed::NocConsole* c = mainWindow->getNsConsole();
+    NetSpeed::NocConsole* c = mw->getNsConsole();
     if (c->get_container().get_state() >= NetSpeed::state_t::Run) {
         action = menu.addAction("Performance Analysis");
         action->setData(QVariant(CMD_PERFORMANCE_ANALYSIS + itemName + " * * "));
         action->setProperty(TEXT_HELP, "perf_analysis_query");
     }
-    if (auto selectedAction = menu.exec(pos))
-        mainWindow->processCommandInConsole(selectedAction->data().toString());
+    if (auto selectedAction = menu.exec(pos)) {
+        mw->processCommandInConsole(selectedAction->data().toString());
+    }
 }
 
 NsArrowItem::NsArrowItem()
@@ -142,22 +143,22 @@ void NsArrowItem::contextMenuEvent(QGraphicsSceneContextMenuEvent* event)
 {
     auto meshScene = dynamic_cast<NsMeshViewScene*>(scene());
     if(!meshScene) return;
-    switch (type)
-    {
-    case VC_ITEM:
-        if ((!openedLinkDiagram) && parentItem()) {
-            if (dynamic_cast<NsRSSBDiagram*>(parentItem()) && vC->get_parent()->is_noc_side_port()) {
-                new NsLinkDiagram(event->pos(), vC->get_parent(), this);
-                openedLinkDiagram = true;
+    MainWindow* mw = qobject_cast<MainWindow*>(QApplication::activeWindow());
+    switch (type) {
+        case VC_ITEM:
+            if ((!openedLinkDiagram) && parentItem()) {
+                if (dynamic_cast<NsRSSBDiagram*>(parentItem()) && vC->get_parent()->is_noc_side_port()) {
+                    new NsLinkDiagram(event->pos(), vC->get_parent(), this);
+                    openedLinkDiagram = true;
+                }
             }
-        }
-        vcContextMenu(event->screenPos(), name, meshScene->getMenuDirection());
-        break;
-    case INTERFACE:
-        interfaceContextMenu(event->screenPos(), name);
-        break;
-    default:
-        break;
+            vcContextMenu(event->screenPos(), name, mw, meshScene->getMenuDirection());
+            break;
+        case INTERFACE:
+            interfaceContextMenu(event->screenPos(), name);
+            break;
+        default:
+            break;
     }
     event->accept();
 }
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.h b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.h
index 4138bcd5c46..62274049eba 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.h
+++ b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsArrowItem.h
@@ -5,7 +5,7 @@
 #include "VC.h"
 #include "Interface.h"
 
-void vcContextMenu(QPoint pos, std::string name, Qt::LayoutDirection dir = Qt::LeftToRight);
+void vcContextMenu(QPoint pos, std::string name, QWidget* wget, Qt::LayoutDirection dir = Qt::LeftToRight);
 
 class NsArrowItem : public QGraphicsPathItem
 {
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.cpp b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.cpp
index aad4c15804f..8313e8678b2 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.cpp
@@ -13,9 +13,9 @@ using namespace std;
 
 NsRouterDiagramManager* NsRouterDiagramManager::m_manager = nullptr;
 
-int getRouterPolygonSize(NetSpeed::Router* router){
-    const int mininum_size = 230;
-    const int offset = 58;
+int getRouterPolygonSize(NetSpeed::Router* router, int polygon_mininum_size=250)
+{
+    int offset = 89;
     int count = 0, maxVcOnPort = 0;
     vector<NetSpeed::Rx_Port*> rx_ports = router->get_rx_noc_ports(true);
     vector<NetSpeed::Tx_Port*> tx_ports = router->get_tx_noc_ports(true);
@@ -29,7 +29,16 @@ int getRouterPolygonSize(NetSpeed::Router* router){
         maxVcOnPort = std::max(++count, maxVcOnPort);
         count = 0;
     }
-    return std::max(maxVcOnPort * offset, mininum_size);
+
+    int max_size = std::max(maxVcOnPort * offset, polygon_mininum_size);
+    if (maxVcOnPort < NetSpeed::VC_id::max) {
+        max_size += 2 * offset;
+        if (maxVcOnPort == (NetSpeed::VC_id::max - 1)) {
+            max_size -= offset;
+        }
+    }
+
+    return (max_size);
 }
 
 QPainterPath getBridgeRouterWindowPath(QRect rect, const int maxWidth, const int maxHeight, const int verticalSliderPos,
@@ -65,7 +74,7 @@ QPainterPath getBridgeRouterWindowPath(QRect rect, const int maxWidth, const int
         toPoint += QPoint(maxWidth, 0); path.lineTo(toPoint);
         toPoint = startPoint + QPoint(-margin, margin); path.lineTo(toPoint);
         path.lineTo(startPoint);
-        //Set pop up menu selection direction to avoid overlap with bridg diagram
+        //Set pop up menu selection direction to avoid overlap with bridge diagram
         if (wScene) wScene->setMenuDirection(Qt::LeftToRight);
     }
     else { // show window on the right of bridge
@@ -515,6 +524,7 @@ void NsRouterDiagramVC::paint(QPainter * painter, const QStyleOptionGraphicsItem
     Q_UNUSED(widget);
 
     // To fix problem which makes QPainter does not draw arrow tail
+    painter->setRenderHint(QPainter::Antialiasing);
     //painter->setRenderHint(QPainter::Qt4CompatiblePainting);
 
     auto arrowPath = path();
@@ -544,7 +554,12 @@ void NsRouterDiagramVC::mousePressEvent(QGraphicsSceneMouseEvent * event) {
         return;
     }
     if (event->button() == Qt::RightButton) {
-        vcContextMenu(event->screenPos(), vc->name());
+        MainWindow* mw = qobject_cast<MainWindow*>(QApplication::activeWindow());
+        if (!mw) {
+            auto nsRouterDiagram = dynamic_cast<NsRouterDiagram*>(this->parentItem());
+            if (nsRouterDiagram) mw = nsRouterDiagram->getMainWindow();
+        }
+        vcContextMenu(event->screenPos(), vc->name(), mw, Qt::LeftToRight);
         event->accept();
     }
     else if (auto mw = qobject_cast<MainWindow*>(QApplication::activeWindow())) {
@@ -553,6 +568,14 @@ void NsRouterDiagramVC::mousePressEvent(QGraphicsSceneMouseEvent * event) {
             propPanel->raiseSelectionTab();
             mw->raiseTooltipTab();
         }
+    } else if (auto nsRouterDiagram = dynamic_cast<NsRouterDiagram*>(this->parentItem())) {
+        auto mw = nsRouterDiagram->getMainWindow();
+        if (!mw) return;
+        if (auto propPanel = mw->getPropertyPanel()) {
+            propPanel->updateLinkVcProperties(vc);
+            propPanel->raiseSelectionTab();
+            mw->raiseTooltipTab();
+        }
     }
     QGraphicsPathItem::mousePressEvent(event);
 }
@@ -643,7 +666,10 @@ void NsCloseSymbol::paint(QPainter* painter, const QStyleOptionGraphicsItem* opt
 void NsRouterDiagram::drawVcLabel(QLineF & line, QString vcName, QPainterPath & path)
 {
     QFont font;
-    const int fontSize = 10;
+    int fontSize = 12;
+    if (router_polygon_size > (2*polygon_mininum_size)) {
+        fontSize = 20;
+    }
     font.setPixelSize(fontSize);
     font.setWeight(QFont::Thin);
     auto fontMetric = QFontMetrics(font).boundingRect(vcName);
@@ -653,28 +679,43 @@ void NsRouterDiagram::drawVcLabel(QLineF & line, QString vcName, QPainterPath &
     bool reverse = false;
     int xMargin = 0;
     int yMargin = 0;
-    const int adjustFactor = fontMetric.height() / 3;
+    const int adjustFactor = static_cast<int>(fontMetric.height() / 3);
     QPoint adjustPoint = QPoint(0, adjustFactor);
     if (end.x() > start.x()) {
-        if (end.y() > start.y()) rotationAngle = 45;
-        else if (end.y() < start.y()) rotationAngle = -45;
-        else rotationAngle = 0;
         xMargin = 6;
+        if (end.y() > start.y()) {
+            rotationAngle = 45;
+            xMargin = 0;
+        } else if (end.y() < start.y()) {
+            rotationAngle = -45;
+            xMargin += xMargin;
+        } else {
+            rotationAngle = 0;
+        }
     }
     else if (end.x() < start.x()) {
-        if (end.y() > start.y()) rotationAngle = 135;
-        else if (end.y() < start.y()) rotationAngle = -135;
-        else rotationAngle = 180;
-        reverse = true;
         xMargin = -6;
+        if (end.y() > start.y()) {
+            rotationAngle = 135;
+            xMargin = 0;
+        } else if (end.y() < start.y()) {
+            rotationAngle = -135;
+            xMargin += xMargin;
+        } else {
+            rotationAngle = 180;
+        }
+        reverse = true;
     }
     else {   //end.x() = start.x()
+        xMargin = 6;
         if (end.y() > start.y()) {
             rotationAngle = 90;
             adjustPoint = QPoint(-adjustFactor, 0);
         }
-        else { rotationAngle = -90; yMargin = adjustFactor; }
-        xMargin = 6;
+        else {
+            rotationAngle = -90; yMargin = adjustFactor;
+            xMargin += xMargin;
+        }
     }
 
     QPainterPath p;
@@ -1071,7 +1112,7 @@ void NsBridgeDiagram::initData()
     }
 }
 
-NsRouterDiagram::NsRouterDiagram(NetSpeed::Router * nsRouter, QGraphicsItem * nsGuiRouter) : QGraphicsPathItem(nsGuiRouter), router(nsRouter), guiRouter(nsGuiRouter)
+NsRouterDiagram::NsRouterDiagram(NetSpeed::Router * nsRouter, QGraphicsItem * nsGuiRouter, bool hasOutLine) : QGraphicsPathItem(nsGuiRouter), router(nsRouter), guiRouter(nsGuiRouter)
 {
     mesh = getFirst<NsMesh>(nsGuiRouter->collidingItems(), MESH);
     setAcceptHoverEvents(true);
@@ -1080,7 +1121,7 @@ NsRouterDiagram::NsRouterDiagram(NetSpeed::Router * nsRouter, QGraphicsItem * ns
     if (wView) mw = wView->getMainWindow();
     m_name = router->name();
     setFlags(QGraphicsItem::ItemIsMovable | QGraphicsItem::ItemSendsScenePositionChanges);
-    initData();
+    initData(hasOutLine);
     m_eff = new QGraphicsOpacityEffect(this);
     m_routerPolyGon->setGraphicsEffect(m_eff);
     m_eff->setOpacity(1);
@@ -1092,7 +1133,7 @@ NsRouterDiagram::~NsRouterDiagram()
     if (mw) mw->removeDiagramItem(this);
 }
 
-void NsRouterDiagram::initData()
+void NsRouterDiagram::initData(bool hasOutLine)
 {
     if (!router || !guiRouter || !wView) return;
     qDeleteAll(childItems());
@@ -1102,6 +1143,11 @@ void NsRouterDiagram::initData()
     layer_id = router->get_layer();
     router_polygon rp = {getRouterPolygonSize(router)};
     const int newSchematicVCPosition = startMargin + rp.north_port_length / 4;
+    router_polygon_size = rp.size;
+    if (router_polygon_size > (2*polygon_mininum_size)) {
+        nameSize   += 8;
+        vcBodyLine += 12;
+    }
     //Calculate router diagram boundary path
     vector<NetSpeed::Rx_Port*> rx_ports = router->get_rx_noc_ports(true);
     vector<NetSpeed::Tx_Port*> tx_ports = router->get_tx_noc_ports(true);
@@ -1182,7 +1228,6 @@ void NsRouterDiagram::initData()
                 width /= sqrt(2);
                 northLen = std::max(northLen, width);
                 westLen = std::max(westLen, width);
-                westLen = westLen > width ? westLen : width;
                 endL = startL = rp.NWStart + QPoint(transition / sqrt(2),
                     -transition / sqrt(2));
                 if (router->use_new_schematic())
@@ -1228,13 +1273,19 @@ void NsRouterDiagram::initData()
         }
     }
 
-    const int margin = 12;
+    const int margin = 25;
     int maxWidth = rp.size + westLen + eastLen + 2 * margin;
     int maxHeight = rp.size + southLen + northLen + 2 * margin;
-    auto guiRouterSceneRect = guiRouter->boundingRect().toRect();
-    auto verticalScrollBarValue = wView->verticalScrollBar()->value();
-    auto viewPortSize = wView->viewport()->rect().size();
-    QRectF routerRecBox;
+    QRect guiRouterSceneRect = QRect(QPoint(), QSize());
+    int verticalScrollBarValue = 0;
+    QSize viewPortSize = QSize();
+    QRectF routerRecBox = QRectF();
+    if (hasOutLine) {
+        guiRouterSceneRect = guiRouter->boundingRect().toRect();
+        verticalScrollBarValue = wView->verticalScrollBar()->value();
+        viewPortSize = wView->viewport()->rect().size();
+    }
+
     bool isDiagramDisplayLeft = false;
     auto diagramPath = getBridgeRouterWindowPath(guiRouterSceneRect, maxWidth, maxHeight, verticalScrollBarValue,
                                                  viewPortSize, nullptr, routerRecBox, &isDiagramDisplayLeft);
@@ -1267,24 +1318,28 @@ void NsRouterDiagram::initData()
     for (auto& it : in_vcs) addVCtoDiagram(it.first, it.second, false, polyGonStartPoint);
     for (auto& it : out_vcs) addVCtoDiagram(it.first, it.second, true, polyGonStartPoint);
 
-    /* Adding a backgound for 'X' symbol */
-    QPainterPath background;
-    const float bg_margin = 33.0;
-    QPointF startPointbg = routerRecBox.topRight() + QPointF(-34.0, 1.0);
-    QSizeF recSize(bg_margin, bg_margin);
-    QRectF recBounding(startPointbg, recSize);
-    background.addRect(recBounding);
-    new NsCloseSymbol(background, true, this);
-
-    /* Adding a 'X' symbol */
-    QPainterPath closeSymbol;
-    const float x_margin = 15.0;
-    QPointF startPointx  = routerRecBox.topRight() + QPointF(-25.0, 10.0);
-    closeSymbol.moveTo(startPointx);
-    closeSymbol.lineTo(startPointx + QPointF(x_margin, x_margin));
-    closeSymbol.moveTo(startPointx + QPointF(0.0, x_margin));
-    closeSymbol.lineTo(startPointx + QPointF(x_margin, 0.0));
-    new NsCloseSymbol(closeSymbol, false, this);
+    if (hasOutLine) {
+        /* Adding a backgound for 'X' symbol */
+        QPainterPath background;
+        const float bg_margin = 33.0;
+        QPointF startPointbg  = routerRecBox.topRight() + QPointF(-34.0, 1.0);
+        QSizeF recSize(bg_margin, bg_margin);
+        QRectF recBounding(startPointbg, recSize);
+        background.addRect(recBounding);
+        new NsCloseSymbol(background, true, this);
+
+        /* Adding a 'X' symbol */
+        QPainterPath closeSymbol;
+        const float x_margin = 15.0;
+        QPointF startPointx  = routerRecBox.topRight() + QPointF(-25.0, 10.0);
+        closeSymbol.moveTo(startPointx);
+        closeSymbol.lineTo(startPointx + QPointF(x_margin, x_margin));
+        closeSymbol.moveTo(startPointx + QPointF(0.0, x_margin));
+        closeSymbol.lineTo(startPointx + QPointF(x_margin, 0.0));
+        new NsCloseSymbol(closeSymbol, false, this);
+    } else {
+        setPen(Qt::NoPen);  // to hide routerRecBox
+    }
 
     update();
 }
@@ -1366,19 +1421,46 @@ QGraphicsItem* NsRouterDiagram::getArrowItem(std::string arrowName)
 
 void NsRouterDiagram::mousePressEvent(QGraphicsSceneMouseEvent * event)
 {
+    event->accept();
+    isDragging = false;
+    startPos = pos();
     mw->updateZValueOfListDiagrams(this);
-    if (wScene) {
-        for (auto item : wScene->selectedItems()) {
+    if (wScene && !wScene->selectedItems().isEmpty()) {
+        for (auto& item : wScene->selectedItems()) {
             item->setSelected(false);
+            item->update();
+        }
+    } else {
+        for (auto& item : this->scene()->selectedItems()) {
+            item->setSelected(false);
+            item->update();
         }
     }
-    hideFlowData();
-    event->accept();
+
+    if ((event->button() != Qt::MiddleButton) && wScene && (!isAddBridgeNoc(wScene->getInsType())) &&
+        !isAddAgentMeshView(wScene->getInsType())) {
+        if (!mw) return;
+        if (auto propPanel = mw->getPropertyPanel()) {
+            propPanel->updateRouterProperties(router, true);
+            propPanel->raiseSelectionTab();
+            mw->raiseTooltipTab();
+        }
+    }
+}
+
+void NsRouterDiagram::mouseReleaseEvent(QGraphicsSceneMouseEvent* event)
+{
+    if (!(isDragging && (pos() != startPos))) {
+        hideFlowData();
+    }
+    isDragging = false;
+    QGraphicsPathItem::mouseReleaseEvent(event);
 }
 
 QVariant NsRouterDiagram::itemChange(GraphicsItemChange change, const QVariant& value)
 {
     if ((change == QGraphicsItem::ItemPositionChange || change == QGraphicsItem::ItemPositionHasChanged) && diagramLine) {
+        if (!isDragging) isDragging = true;
         diagramLine->moveLineToPosition(scenePos() + arrowPos);
     } else if (change == QGraphicsItem::ItemVisibleChange && diagramLine) {
         diagramLine->setLineVisible(value.toBool());
@@ -1389,8 +1471,9 @@ QVariant NsRouterDiagram::itemChange(GraphicsItemChange change, const QVariant&
 
 void NsRouterDiagram::hoverEnterEvent(QGraphicsSceneHoverEvent * event)
 {
-    if (NetSpeed::Grid::tooltip_on && toolTip().isEmpty())
+    if (NetSpeed::Grid::tooltip_on && toolTip().isEmpty()) {
         setToolTip(toolTip2Html(router->get_tooltip()));
+    }
     QGraphicsPathItem::hoverEnterEvent(event);
 }
 
@@ -1422,6 +1505,17 @@ NsRouterPolyGon::NsRouterPolyGon(NetSpeed::Router * r, QPointF & start, const QP
     }
     routerName =  QString::fromStdString(router->name());
     boundingRec = path.boundingRect();
+
+    int polygon_mininum_size = 250;
+    auto routerDiagram  = dynamic_cast<NsRouterDiagram*>(parent);
+    if (routerDiagram) polygon_mininum_size = routerDiagram->get_polygon_minimum_size();
+    if (rp.size >= (2*polygon_mininum_size)) {
+        xOffsetMargin   += 30;
+        yOffsetMargin   += 30;
+        diagramTextSize += 30;
+        diagramNameSize += 30;
+        tolerance += 10;
+    }
 }
 
 void NsRouterPolyGon::hoverEnterEvent(QGraphicsSceneHoverEvent * event) {
@@ -1430,19 +1524,25 @@ void NsRouterPolyGon::hoverEnterEvent(QGraphicsSceneHoverEvent * event) {
     QGraphicsPathItem::hoverEnterEvent(event);
 }
 
-void NsRouterPolyGon::mousePressEvent(QGraphicsSceneMouseEvent * event) {
+void NsRouterPolyGon::mousePressEvent(QGraphicsSceneMouseEvent * event)
+{
     event->ignore();
-    auto meshScene = static_cast<NsMeshViewScene*>(scene());
-    if (event->button() != Qt::MiddleButton && !isAddBridgeNoc(meshScene->getInsType()) &&
+    auto router_diagram = dynamic_cast<NsRouterDiagram*>(this->parentItem());
+    if (!router_diagram) return;
+    if (router_diagram->getFlowData()) return;
+    auto meshScene = router_diagram->getMeshViewScene();
+    if ((event->button() != Qt::MiddleButton) && meshScene && (!isAddBridgeNoc(meshScene->getInsType())) &&
         !isAddAgentMeshView(meshScene->getInsType())) {
-        auto mw = qobject_cast<MainWindow*>(QApplication::activeWindow());
-        if (!mw)  return;
+        auto mw = router_diagram->getMainWindow();
+        if (!mw) return;
         if (auto propPanel = mw->getPropertyPanel()) {
             propPanel->updateRouterProperties(router, true);
             propPanel->raiseSelectionTab();
             mw->raiseTooltipTab();
         }
     }
+
+    QGraphicsPathItem::mousePressEvent(event);
 }
 
 void NsRouterPolyGon::drawTextRouterDiagram(QPainter & painter, NetSpeed::Port_id it)
@@ -1650,7 +1750,11 @@ void NsRouterPolyGon::drawAddDrop(QPainter & painter, NetSpeed::Port_id p, bool
     painter.restore();
 }
 
-void NsRouterPolyGon::paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget) {
+void NsRouterPolyGon::paint(QPainter * painter, const QStyleOptionGraphicsItem * option, QWidget * widget)
+{
+    qreal levelOfDetail = QStyleOptionGraphicsItem::levelOfDetailFromTransform(painter->worldTransform());
+    if (levelOfDetail > 5.0) return;
+
     painter->setRenderHint(QPainter::Antialiasing);
     painter->save();
     const int polygonPen = 2;
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.h b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.h
index 60f1f2f61b3..bcfff10eefa 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.h
+++ b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsBridgeDiagram.h
@@ -162,9 +162,9 @@ class NsRouterDiagram : public QObject, public QGraphicsPathItem
 {
     Q_OBJECT
 public:
-    NsRouterDiagram(NetSpeed::Router*, QGraphicsItem*);
+    NsRouterDiagram(NetSpeed::Router*, QGraphicsItem*, bool hasOutLine = true);
     ~NsRouterDiagram();
-    void initData();
+    void initData(bool);
     void drawVcLabel(QLineF&, QString, QPainterPath&);
     void drawFeedBackArrow(int dir, QLineF & line, const NetSpeed::VC * vc, QGraphicsItem * parent);
     QGraphicsItem* getGuiRouter() { return guiRouter; }
@@ -176,14 +176,19 @@ public:
     void showFlowData(const NetSpeed::VC * vc, bool hasAnimation = true, bool hover = false);
     void showFlowData(std::string arrowName, bool hasAnimation = true);
     void hideFlowData(bool hover = false);
+    QGraphicsPathItem* getFlowData() const { return flowData; }
     void showTooltip(std::string arrowName);
+    int get_polygon_minimum_size() { return polygon_mininum_size; }
+    int get_polygon_size() { return router_polygon_size; }
+    MainWindow* getMainWindow() const { return mw; }
+    NsMeshViewScene* getMeshViewScene() const { return wScene; }
 
  private:
     friend class Test_NsBridgeDiagram;
     //Use in vc start point and end point calculation
     const int vcLength = 30;
-    const int nameSize = 10;
-    const int vcBodyLine = 25;
+    int nameSize = 12;
+    int vcBodyLine = 25;
     const int startMargin = 4;
 
     int node_id = -1;
@@ -195,6 +200,8 @@ public:
     std::vector<QPair<QLineF, const NetSpeed::VC*>> out_vcs;
     NetSpeed::Router* router = nullptr;
 
+    const int polygon_mininum_size = 400;
+    int router_polygon_size = 0;
     QGraphicsItem* guiRouter = nullptr;
     NsMeshViewScene* wScene = nullptr;
     NsView* wView = nullptr;
@@ -205,6 +212,8 @@ public:
     QGraphicsItem* m_routerPolyGon = nullptr;
     QGraphicsOpacityEffect* m_eff = nullptr;
     bool m_blur = false;
+    bool isDragging = false;
+    QPointF startPos;
 
 private:
     QPainterPath genRouterPolygon(QPointF,router_polygon);
@@ -216,6 +225,7 @@ private:
 protected:
     virtual int type() const override { return ROUTER_DIAGRAM; }
     void mousePressEvent(QGraphicsSceneMouseEvent* event) override;
+    void mouseReleaseEvent(QGraphicsSceneMouseEvent* event) override;
     void hoverEnterEvent(QGraphicsSceneHoverEvent* event) override;
     void contextMenuEvent(QGraphicsSceneContextMenuEvent* event) override;
     QVariant itemChange(GraphicsItemChange change, const QVariant& value) override;
@@ -234,11 +244,11 @@ private:
     QPointF startPoint;
     NetSpeed::Router* router = nullptr;
 
-    const int tolerance = 5;
-    const int xOffsetMargin = 28;
-    const int yOffsetMargin = 15;
-    const int diagramTextSize = 13;
-    const int diagramNameSize = 15;
+    int tolerance = 5;
+    int xOffsetMargin = 28;
+    int yOffsetMargin = 15;
+    int diagramTextSize = 13;
+    int diagramNameSize = 18;
 
     const float sizeFactor = 0.6;
     const float pointFactor = 0.2;
@@ -252,8 +262,7 @@ private:
 
 private:
     void drawTextRouterDiagram(QPainter&, NetSpeed::Port_id);
-    void drawAddDrop(QPainter&, NetSpeed::Port_id
-        , bool);
+    void drawAddDrop(QPainter&, NetSpeed::Port_id, bool);
 
 protected:
     friend class Test_NsBridgeDiagram;
@@ -448,12 +457,14 @@ public:
     void showFlowData(NetSpeed::Rx_VChannel* chanel, bool hasAnimation = true);
     void showFlowData(std::string arrowName, bool hasAnimation = true);
     void hideFlowData(bool hover = false);
+    QGraphicsPathItem* getFlowData() const { return flowData; }
     void clearMesh() { mesh = nullptr; }
     std::string m_name;
     int m_layerId;
     QGraphicsItem* parentBridge = nullptr;
     QGraphicsItem* getGuiBridge() { return guiBridge; }
     void showTooltip(std::string arrowName);
+
 private:
     /*Rssb Bridge*/
     void initRssbBridgeData();
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.cpp b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.cpp
index 7772594705e..c46d42976f0 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.cpp
@@ -28,6 +28,8 @@
 using namespace NetSpeed;
 using namespace std;
 
+extern int getRouterPolygonSize(NetSpeed::Router* router, int polygon_mininum_size = 250);
+
 NsRouter::NsRouter(NetSpeed::Layer_id layer, NetSpeed::Node_id routerId, NetSpeed::Grid* grid, bool active)
     : layer(layer), routerId(routerId), grid(grid), active(active)
 {
@@ -287,6 +289,39 @@ QVariant NsRouter::itemChange(QGraphicsItem::GraphicsItemChange change, const QV
     return QGraphicsRectItem::itemChange(change, value);
 }
 
+
+void NsRouter::moveRouterDiagramToDialog(QGraphicsItem* item, QString& routerName, QWidget* parent)
+{
+    // Get the bounding rect of the item
+    QRectF itemRect  = item->boundingRect();
+    QRectF sceneRect = itemRect.adjusted(-1, -1, 1, 1);
+    double aspectRatio = itemRect.width() / itemRect.height();
+    int w = static_cast<int>(itemRect.width() * 0.55);
+    int h = static_cast<int>(w/aspectRatio);
+
+    QGraphicsScene* scene = new QGraphicsScene();
+    scene->setSceneRect(sceneRect);
+    scene->addItem(item);
+    autoFitView* view = new autoFitView(scene, item);
+
+    // Wrap view in aspect-ratio-enforcing widget
+    QWidget* aspectWrapper = new aspectRatioWidget(view, aspectRatio);
+
+    // Layout
+    customDialog* dialog = new customDialog(view, parent);
+    QVBoxLayout* layout = new QVBoxLayout();
+    layout->setContentsMargins(0, 0, 0, 0);
+    layout->addWidget(aspectWrapper);
+    dialog->setLayout(layout);
+
+    // Create a dialog without borders
+    dialog->setWindowFlags(Qt::Dialog | Qt::Tool);
+    dialog->setAttribute(Qt::WA_DeleteOnClose);
+    dialog->setWindowTitle("Router Diagram " + routerName);
+    dialog->resize(w, h);
+    dialog->show();
+}
+
 /**
 * @brief to receive mouse press events for this item
 * @param event of mouse
@@ -327,10 +362,25 @@ void NsRouter::mousePressEvent(QGraphicsSceneMouseEvent * event)
             if (!router) return;
             if (!grid->is_active_router(router->get_layer(),
                 router->get_id())) return;
-            //bool hasMeshSplit = false;
-            auto diagram = NsRouterDiagramManager::manager(scene())->createDiagramFromRouter(this);
-            if (diagram) {
-                mw->appendListDiagrams(diagram);
+
+            /* Don't create a new router diagram if it was openned */
+            for (const auto& hugeDialog : mw->findChildren<customDialog*>("hugeDialogs")) {
+                if (hugeDialog->windowTitle().contains(this->getName())) {
+                    hugeDialog->raise();   // Bring to top of stacking order
+                    hugeDialog->activateWindow();
+                    hugeDialog->setFocus();
+                    return;
+                }
+            }
+
+            if (getRouterPolygonSize(this->getRouter()) < 800) {
+                auto normalDiagram = NsRouterDiagramManager::manager(scene())->createDiagramFromRouter(this);
+                mw->appendListDiagrams(normalDiagram);
+            } else {
+                auto hugeDiagram = new NsRouterDiagram(this->getRouter(), this, false);
+                hugeDiagram->setParentItem(nullptr);
+                QString routerName = QString::fromStdString(hugeDiagram->getName());
+                moveRouterDiagramToDialog(hugeDiagram, routerName, mw);
             }
         } else if (event->button() == Qt::LeftButton) {
             auto diagramOpenning = isOpenedDiagram(mw->getListDiagrams());
@@ -928,4 +978,3 @@ void NsChopViewRouter::hoverEnterEvent(QGraphicsSceneHoverEvent * event)
         setToolTip(toolTip2Html(QString::fromStdString(router->get_tooltip())));
     QGraphicsRectItem::hoverEnterEvent(event);
 }
-
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.h b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.h
index fe45260a7db..a4942b88db0 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.h
+++ b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsRouter.h
@@ -67,7 +67,7 @@ public:
     std::string getRTLGroup();
     void setDefaultSize() { highlight = false; setRect(rec); }
     void updateSize(QRectF r) { highlight = true; setRect(r); }
-
+    void moveRouterDiagramToDialog(QGraphicsItem*, QString&, QWidget*);
     bool highlight = false;
 
 signals:
@@ -124,7 +124,7 @@ private:
     const NetSpeed::Power_domain_props_t* powerDomainRouter = nullptr;
     bool showLinkOnly = false;
     bool isSCFMode = false;
-    QRectF rec = QRectF();   
+    QRectF rec = QRectF();
 };
 
 class NsChopViewRouter : public QGraphicsRectItem
@@ -223,4 +223,71 @@ protected:
     QPainterPath shape() const override;
 };
 
+class aspectRatioWidget : public QWidget {
+public:
+    aspectRatioWidget(QGraphicsView* view, double aspectRatio, QWidget* parent = nullptr)
+    : QWidget(parent), m_view(view), m_aspectRatio(aspectRatio) {
+        auto layout = new QVBoxLayout(this);
+        layout->setContentsMargins(0, 0, 0, 0);
+        layout->addWidget(m_view);
+    }
+
+    QSize sizeHint() const override {
+        QSize s = m_view->sizeHint();
+        return QSize(s.width(), static_cast<int>(s.width() / m_aspectRatio));
+    }
+
+    bool hasHeightForWidth() const override { return true; }
+    int heightForWidth(int w) const override { return static_cast<int>(w / m_aspectRatio); }
+    QGraphicsView* getView() const { return m_view; }
+
+private:
+    QGraphicsView* m_view;
+    double m_aspectRatio;
+};
+
+
+class customDialog : public QDialog
+{
+    Q_OBJECT
+public:
+    customDialog(QGraphicsView* view, QWidget* parent = nullptr) : QDialog(parent) {
+        m_view = view;
+        setObjectName("hugeDialogs");
+        setMinimumSize(500, 500);
+    }
+
+    QGraphicsView* getView() const { return m_view; }
+
+private:
+    QGraphicsView* m_view = nullptr;
+};
+
+class autoFitView : public QGraphicsView
+{
+public:
+    autoFitView(QGraphicsScene* scene, QGraphicsItem* item, QWidget* parent = nullptr)
+    : QGraphicsView(scene, parent), m_item(item) {
+        setFrameShape(QFrame::NoFrame);
+        setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
+        setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
+        setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
+    }
+    void updateItem(QGraphicsItem* newItem) { m_item = newItem; }
+
+protected:
+    void resizeEvent(QResizeEvent* event) override {
+        QGraphicsView::resizeEvent(event);
+        fitInView(m_item, Qt::KeepAspectRatio);
+    }
+
+    void showEvent(QShowEvent* event) override {
+        QGraphicsView::showEvent(event);
+        fitInView(m_item, Qt::KeepAspectRatio);
+        this->updateGeometry();
+    }
+
+private:
+    QGraphicsItem* m_item;
+};
 #endif // NS_ROUTER_H
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsVC.cpp b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsVC.cpp
index 6ea5b9ef9a1..b6a7d61edc1 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/Item/NsVC.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/Item/NsVC.cpp
@@ -302,8 +302,8 @@ void NsVC::addVC()
     lineStart.setY(in.y() * NODE_SIZE);
     lineEnd.setX(out.x() * NODE_SIZE);
     lineEnd.setY(out.y() * NODE_SIZE);
-    const qreal eastMargin = 2.5;
-    const qreal westMargin = 5;
+    const qreal eastMargin = 1.25;
+    const qreal westMargin = 2.5;
     const int topMargin = 1;
     switch (directionVC.id)
     {
@@ -385,6 +385,7 @@ void NsVC::initData()
     /* Set line width */
     QPen pen = this->pen();
     pen.setColor(convertVCColor(vc->get_color()));
+    pen.setWidthF(0.3);
     setPen(pen);
     auto meshScene = static_cast<NsMeshViewScene*>(scene());
     if(meshScene && meshScene->getNsWorkArea()){
@@ -468,9 +469,11 @@ void NsVC::contextMenuEvent(QGraphicsSceneContextMenuEvent * event) {
     auto meshScene = static_cast<NsMeshViewScene*>(scene());
     if(!meshScene) return;
     if (NetSpeed::is_member(meshScene->getInsType(), {ADD_ROUTER_CONN, ADD_ROUTER2ROUTER})) return;
-    if(auto window = dynamic_cast<MainWindow*>(QApplication::activeWindow()))
-        if(window->isShowLinkOnly()) new NsLinkDiagram(event->pos(), vc->get_parent(), this);
-    vcContextMenu(event->screenPos(), vc->name(), meshScene->getMenuDirection());
+    auto mw = dynamic_cast<MainWindow*>(QApplication::activeWindow());
+    if (mw && mw->isShowLinkOnly()) {
+        new NsLinkDiagram(event->pos(), vc->get_parent(), this);
+    }
+    vcContextMenu(event->screenPos(), vc->name(), mw, meshScene->getMenuDirection());
     event->accept();
 }
 
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/View/NsNocViewScene.cpp b/src/sw/noc_dev/prototype_qt6/Gui/View/NsNocViewScene.cpp
index 32f419fdfc2..bc170686e28 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/View/NsNocViewScene.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/View/NsNocViewScene.cpp
@@ -39,6 +39,8 @@
 using namespace NetSpeed;
 using namespace std;
 
+extern int getRouterPolygonSize(NetSpeed::Router* router, int polygon_mininum_size = 250);
+
 /**
  * @brief find the Item in the Scene. T can be NsNormalBridge, NsRegbusBridge
  * @param Netspeed::Bridge
@@ -410,15 +412,54 @@ bool NsNocViewScene::zoomOn(QString compName, QString color)
                 mw->setLayerButtonState(routerItem->getLayerID(), true, true);
             }
             if (!routerItem->isVisible()) return false;
-            auto diagram = NsRouterDiagramManager::manager(this)->createDiagramFromRouter(routerItem);
             VC* vc = dynamic_cast<VC*>(routerLink);
-            if (vc) {
-                if (!color.isEmpty()) routerLink->highlight_color = color.toStdString();
-                nsWorkArea->setZoomFactor(qreal(1.3));
-                nsWorkArea->centerOn(diagram);
-                diagram->showFlowData(vc);
-                diagram->showTooltip(vc->name());
+            /* Don't create a new router diagram if it was openned */
+            for (const auto& hugeDialog : mw->findChildren<customDialog*>("hugeDialogs")) {
+                if (hugeDialog->windowTitle().contains(routerItem->getName())) {
+                    hugeDialog->raise();  // Bring to top of stacking order
+                    hugeDialog->setFocus();
+                    if (vc) {
+                        auto view  = hugeDialog->getView();
+                        if (!view) return false;
+                        auto scene = view->scene();
+                        if (!scene) return false;
+                        if (!color.isEmpty()) routerLink->highlight_color = color.toStdString();
+                        for (const auto& item : scene->items()) {
+                            if (NsRouterDiagram* diagram = dynamic_cast<NsRouterDiagram*>(item)) {
+                                diagram->showFlowData(vc);
+                                diagram->showTooltip(vc->name());
+                                ok = true;
+                                break;
+                            }
+                        }
+                    }
+                }
+            }
+
+            if (ok) return true;
+
+            if (getRouterPolygonSize(routerItem->getRouter()) < 800) {
+                auto normalDiagram = NsRouterDiagramManager::manager(this)->createDiagramFromRouter(routerItem);
+                mw->appendListDiagrams(normalDiagram);
+                if (vc) {
+                    if (!color.isEmpty()) routerLink->highlight_color = color.toStdString();
+                    nsWorkArea->setZoomFactor(nsWorkArea->getZoomFitValue(normalDiagram->boundingRect().width(), normalDiagram->boundingRect().height()) - 0.1);
+                    nsWorkArea->centerOn(normalDiagram);
+                    normalDiagram->showFlowData(vc);
+                    normalDiagram->showTooltip(vc->name());
+                }
+            } else {
+                auto hugeDiagram = new NsRouterDiagram(routerItem->getRouter(), routerItem, false);
+                hugeDiagram->setParentItem(nullptr);
+                QString routerName = QString::fromStdString(hugeDiagram->getName());
+                routerItem->moveRouterDiagramToDialog(hugeDiagram, routerName, mw);
+                if (vc) {
+                    if (!color.isEmpty()) routerLink->highlight_color = color.toStdString();
+                    hugeDiagram->showFlowData(vc);
+                    hugeDiagram->showTooltip(vc->name());
+                }
             }
+
             ok = true;
         }
     }
@@ -1036,6 +1077,11 @@ void NsNocViewScene::mousePressEvent(QGraphicsSceneMouseEvent* event)
             }
         }
         qDeleteAll(to_be_deleted);
+
+        /* Deleting huge router diagrams only */
+        for (auto& hugeDialog : mw->findChildren<customDialog*>("hugeDialogs")) {
+            hugeDialog->close(); /* The huge dialog will be destroyed by itselft */
+        }
     }
 
     // storage layer id
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/View/NsScene.cpp b/src/sw/noc_dev/prototype_qt6/Gui/View/NsScene.cpp
index 6930b010a89..71a64a9fabb 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/View/NsScene.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/View/NsScene.cpp
@@ -1039,6 +1039,33 @@ void NsMeshViewScene::display()
         }
     }
 
+    /* Update router diagram of huge dialogs */
+    for (const auto& dialog : mw->findChildren<QDialog*>("hugeDialogs")) {
+        auto hugeDialog = dynamic_cast<customDialog*>(dialog);
+        if (!hugeDialog) return;
+        auto view = hugeDialog->getView();
+        if (!view) return;
+        auto scene  = view->scene();
+        if (!scene) return;
+        QString name = hugeDialog->windowTitle().remove(QString("Router Diagram R"));
+        int l = name.split(".").first().toInt();
+        scene->clear();
+        for (const auto& item : layers[l]->collidingItems()) {
+            if (item->type() == ROUTER) {
+                auto routerItem = dynamic_cast<NsRouter*>(item);
+                if (!routerItem) continue;
+                if (!routerItem->getRouter()->is_enabled()) continue;
+                if (routerItem->getName() == QString("R" + name)) {
+                    auto newDiagram = new NsRouterDiagram(routerItem->getRouter(), routerItem, false);
+                    scene->addItem(newDiagram);
+                    autoFitView* viewFit = dynamic_cast<autoFitView*>(view);
+                    if (viewFit) viewFit->updateItem(newDiagram);
+                    break;
+                }
+            }
+        }
+    }
+
     if (listRestoreDiagrams.isEmpty()) return;
     for (const auto& diagramName : listRestoreDiagrams) {
         auto name  = diagramName.split(QRegularExpression("-")).first();
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp b/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp
index 48de814287f..fa3ca104f28 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/mainwindow.cpp
@@ -2153,6 +2153,12 @@ void MainWindow::toggleDomainAct(bool state)
         }
     }
 
+    for (auto& dialog : findChildren<QDialog*>()) {
+        if (dialog->windowTitle().contains(QString("Router Diagram"))) { /* huge dialog */
+            dialog->close();
+        }
+    }
+
     setEnableAddButton(ins == TOGGLE_CLOCK_DOMAIN_VIEW ? vector<InstrumentsEnum>{ADD_CLOCK_DOMAIN} :
                        ins == TOGGLE_VOLTAGE_DOMAIN_VIEW ? vector<InstrumentsEnum>{ADD_VOTAGE_DOMAIN} :
                        ins == TOGGLE_POWER_DOMAIN_VIEW ? vector<InstrumentsEnum>{ADD_POWER_DOMAIN} :
@@ -7625,6 +7631,14 @@ void MainWindow::onReloadTabContent(const QString & tabName)
         return;
     }
 
+    if (tabName != QString(TAB_GRID_VIEW)) {
+        for (auto& dialog : findChildren<QDialog*>()) {
+            if (dialog->windowTitle().contains(QString("Router Diagram"))) { /* huge dialog */
+                dialog->close();
+            }
+        }
+    }
+
     QMap<QString, PropertyModelEntry*>::iterator iter = modelMap.find(tabName);
     if (iter != modelMap.end())
     {
@@ -9422,7 +9436,7 @@ void MainWindow::clearListDiagrams()
 
 void MainWindow::updateZValueOfListDiagrams(QGraphicsItem* diagram)
 {
-    if (listDiagrams.isEmpty()) return;
+    if (listDiagrams.size() < 2) return;
     int itemIndex = listDiagrams.indexOf(diagram);
     if (itemIndex == -1) return;
     // Move diagram to end of list
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp b/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp
index 78baad0be1d..976fa8c18ba 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/myconsole.cpp
@@ -3529,6 +3529,11 @@ void INIConsole::preCommandDeclaration()
         mainWindow->topoMap.clear();
         mainWindow->indexLayer = 0;
         if (mainWindow->isSearching) mainWindow->isSearching = false;
+        for (auto& dialog : mainWindow->findChildren<QDialog*>()) {
+            if (dialog->windowTitle().contains(QString("Router Diagram"))) { /* huge dialog */
+                dialog->close();
+            }
+        }
         return true;
     });
 
@@ -3922,6 +3927,12 @@ void INIConsole::postCommandDeclaration()
                 auto propPanel = mainWindow->getPropertyPanel();
                 if (!propPanel) return;
                 propPanel->clearSelection();
+
+                for (auto& dialog : mainWindow->findChildren<QDialog*>()) {
+                    if (dialog->windowTitle().contains(QString("Router Diagram"))) { /* huge dialog */
+                        dialog->close();
+                    }
+                }
             });
         }
     });
@@ -3955,6 +3966,12 @@ void INIConsole::postCommandDeclaration()
                 if (displayPanel && nsWorkArea) {
                     displayPanel->setTabText(displayPanel->indexOf(nsWorkArea), proj_name);
                 }
+
+                for (auto& dialog : mainWindow->findChildren<QDialog*>()) {
+                    if (dialog->windowTitle().contains(QString("Router Diagram"))) { /* huge dialog */
+                        dialog->close();
+                    }
+                }
             });
         }
     });
diff --git a/src/sw/noc_dev/prototype_qt6/Gui/propertypanel.cpp b/src/sw/noc_dev/prototype_qt6/Gui/propertypanel.cpp
index 7ea4cb1fa2d..5d7a6975600 100644
--- a/src/sw/noc_dev/prototype_qt6/Gui/propertypanel.cpp
+++ b/src/sw/noc_dev/prototype_qt6/Gui/propertypanel.cpp
@@ -6583,15 +6583,22 @@ void PropertyPanel::updateRouterProperties(const NetSpeed::Router * r, bool clic
         }
     }
 
-    clearSelection();
+    clearSelection(true); /* Exclude tooltip */
 
+    /* Create Router properties */
     createRouterPropertyItems(r, selectionPropertyEditor);
 
     // Show in tooltip window
     NetSpeed::NocConsole* c = mw->getNsConsole();
     if (c && c->get_container().get_state() >= NetSpeed::state_t::Mapped) {
-        auto tooltip = QString::fromStdString(r->get_tooltip());
-        updateTooltipWindow(tooltip);
+        QFuture<QString> future = QtConcurrent::run([r]() { return QString::fromStdString(r->get_tooltip()); });
+        QFutureWatcher<QString>* watcher = new QFutureWatcher<QString>();
+        QObject::connect(watcher, &QFutureWatcher<QString>::finished, [&, future]() {
+            QString tt = future.result();
+            if (mw) mw->setTextTooltipWindow(QString());  // Clear tooltip
+            updateTooltipWindow(tt);
+        });
+        watcher->setFuture(future);
     }
     applyCurrentFilterSeletionTab();
 }
